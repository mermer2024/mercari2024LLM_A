// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CreateShopRequest defines model for CreateShopRequest.
type CreateShopRequest struct {
	Description string  `json:"description"`
	HeaderImage *string `json:"headerImage,omitempty"`
	Name        string  `json:"name"`
	OwnerId     string  `json:"ownerId"`
}

// EditShopRequest defines model for EditShopRequest.
type EditShopRequest struct {
	Description string  `json:"description"`
	HeaderImage *string `json:"headerImage,omitempty"`
}

// PostOpenAIRequest defines model for PostOpenAIRequest.
type PostOpenAIRequest struct {
	Sentences []string `json:"sentences"`
}

// PostOpenAIResponse defines model for PostOpenAIResponse.
type PostOpenAIResponse struct {
	// Message The message returned from OpenAI API
	Message *string `json:"message,omitempty"`
}

// Product defines model for Product.
type Product struct {
	Id    string  `json:"id"`
	Name  string  `json:"name"`
	Price float32 `json:"price"`
	Stock int     `json:"stock"`
}

// ProductList defines model for ProductList.
type ProductList = []Product

// Recommendation defines model for Recommendation.
type Recommendation struct {
	Product *Product `json:"product,omitempty"`
	Shop    *Shop    `json:"shop,omitempty"`
}

// RecommendationList defines model for RecommendationList.
type RecommendationList = []Recommendation

// Shop defines model for Shop.
type Shop struct {
	Description string `json:"description"`
	Followers   *int   `json:"followers,omitempty"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	OwnerId     string `json:"ownerId"`
}

// ShopList defines model for ShopList.
type ShopList = []Shop

// PostMatchShopsJSONBody defines parameters for PostMatchShops.
type PostMatchShopsJSONBody struct {
	Interests []string `json:"interests"`
	UserId    string   `json:"userId"`
}

// GetSearchShopsParams defines parameters for GetSearchShops.
type GetSearchShopsParams struct {
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// PostShopsShopIdFollowJSONBody defines parameters for PostShopsShopIdFollow.
type PostShopsShopIdFollowJSONBody struct {
	UserId string `json:"userId"`
}

// PostShopsShopIdProductsProductIdCaptionJSONBody defines parameters for PostShopsShopIdProductsProductIdCaption.
type PostShopsShopIdProductsProductIdCaptionJSONBody struct {
	Caption string `json:"caption"`
}

// GetShopsShopIdSearchProductsParams defines parameters for GetShopsShopIdSearchProducts.
type GetShopsShopIdSearchProductsParams struct {
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// DeleteShopsShopIdUnfollowParams defines parameters for DeleteShopsShopIdUnfollow.
type DeleteShopsShopIdUnfollowParams struct {
	UserId string `form:"userId" json:"userId"`
}

// PostMatchShopsJSONRequestBody defines body for PostMatchShops for application/json ContentType.
type PostMatchShopsJSONRequestBody PostMatchShopsJSONBody

// PostOpenaiJSONRequestBody defines body for PostOpenai for application/json ContentType.
type PostOpenaiJSONRequestBody = PostOpenAIRequest

// PostShopsJSONRequestBody defines body for PostShops for application/json ContentType.
type PostShopsJSONRequestBody = CreateShopRequest

// PutShopsShopIdJSONRequestBody defines body for PutShopsShopId for application/json ContentType.
type PutShopsShopIdJSONRequestBody = EditShopRequest

// PostShopsShopIdFollowJSONRequestBody defines body for PostShopsShopIdFollow for application/json ContentType.
type PostShopsShopIdFollowJSONRequestBody PostShopsShopIdFollowJSONBody

// PostShopsShopIdProductsProductIdCaptionJSONRequestBody defines body for PostShopsShopIdProductsProductIdCaption for application/json ContentType.
type PostShopsShopIdProductsProductIdCaptionJSONRequestBody PostShopsShopIdProductsProductIdCaptionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /match_shops)
	PostMatchShops(ctx echo.Context) error

	// (POST /openai)
	PostOpenai(ctx echo.Context) error

	// (GET /ping)
	GetPing(ctx echo.Context) error

	// (GET /recommendations/today)
	GetRecommendationsToday(ctx echo.Context) error

	// (GET /search_shops)
	GetSearchShops(ctx echo.Context, params GetSearchShopsParams) error

	// (POST /shops)
	PostShops(ctx echo.Context) error

	// (PUT /shops/{shopId})
	PutShopsShopId(ctx echo.Context, shopId string) error

	// (POST /shops/{shopId}/follow)
	PostShopsShopIdFollow(ctx echo.Context, shopId string) error

	// (POST /shops/{shopId}/products/{productId}/caption)
	PostShopsShopIdProductsProductIdCaption(ctx echo.Context, shopId string, productId string) error

	// (POST /shops/{shopId}/products/{productId}/sold_out)
	PostShopsShopIdProductsProductIdSoldOut(ctx echo.Context, shopId string, productId string) error

	// (GET /shops/{shopId}/search_products)
	GetShopsShopIdSearchProducts(ctx echo.Context, shopId string, params GetShopsShopIdSearchProductsParams) error

	// (DELETE /shops/{shopId}/unfollow)
	DeleteShopsShopIdUnfollow(ctx echo.Context, shopId string, params DeleteShopsShopIdUnfollowParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostMatchShops converts echo context to params.
func (w *ServerInterfaceWrapper) PostMatchShops(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMatchShops(ctx)
	return err
}

// PostOpenai converts echo context to params.
func (w *ServerInterfaceWrapper) PostOpenai(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOpenai(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRecommendationsToday converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecommendationsToday(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecommendationsToday(ctx)
	return err
}

// GetSearchShops converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearchShops(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchShopsParams
	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSearchShops(ctx, params)
	return err
}

// PostShops converts echo context to params.
func (w *ServerInterfaceWrapper) PostShops(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShops(ctx)
	return err
}

// PutShopsShopId converts echo context to params.
func (w *ServerInterfaceWrapper) PutShopsShopId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId string

	err = runtime.BindStyledParameterWithOptions("simple", "shopId", ctx.Param("shopId"), &shopId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutShopsShopId(ctx, shopId)
	return err
}

// PostShopsShopIdFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostShopsShopIdFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId string

	err = runtime.BindStyledParameterWithOptions("simple", "shopId", ctx.Param("shopId"), &shopId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShopsShopIdFollow(ctx, shopId)
	return err
}

// PostShopsShopIdProductsProductIdCaption converts echo context to params.
func (w *ServerInterfaceWrapper) PostShopsShopIdProductsProductIdCaption(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId string

	err = runtime.BindStyledParameterWithOptions("simple", "shopId", ctx.Param("shopId"), &shopId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShopsShopIdProductsProductIdCaption(ctx, shopId, productId)
	return err
}

// PostShopsShopIdProductsProductIdSoldOut converts echo context to params.
func (w *ServerInterfaceWrapper) PostShopsShopIdProductsProductIdSoldOut(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId string

	err = runtime.BindStyledParameterWithOptions("simple", "shopId", ctx.Param("shopId"), &shopId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShopsShopIdProductsProductIdSoldOut(ctx, shopId, productId)
	return err
}

// GetShopsShopIdSearchProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetShopsShopIdSearchProducts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId string

	err = runtime.BindStyledParameterWithOptions("simple", "shopId", ctx.Param("shopId"), &shopId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShopsShopIdSearchProductsParams
	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetShopsShopIdSearchProducts(ctx, shopId, params)
	return err
}

// DeleteShopsShopIdUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteShopsShopIdUnfollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shopId" -------------
	var shopId string

	err = runtime.BindStyledParameterWithOptions("simple", "shopId", ctx.Param("shopId"), &shopId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shopId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteShopsShopIdUnfollowParams
	// ------------- Required query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, true, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteShopsShopIdUnfollow(ctx, shopId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/match_shops", wrapper.PostMatchShops)
	router.POST(baseURL+"/openai", wrapper.PostOpenai)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/recommendations/today", wrapper.GetRecommendationsToday)
	router.GET(baseURL+"/search_shops", wrapper.GetSearchShops)
	router.POST(baseURL+"/shops", wrapper.PostShops)
	router.PUT(baseURL+"/shops/:shopId", wrapper.PutShopsShopId)
	router.POST(baseURL+"/shops/:shopId/follow", wrapper.PostShopsShopIdFollow)
	router.POST(baseURL+"/shops/:shopId/products/:productId/caption", wrapper.PostShopsShopIdProductsProductIdCaption)
	router.POST(baseURL+"/shops/:shopId/products/:productId/sold_out", wrapper.PostShopsShopIdProductsProductIdSoldOut)
	router.GET(baseURL+"/shops/:shopId/search_products", wrapper.GetShopsShopIdSearchProducts)
	router.DELETE(baseURL+"/shops/:shopId/unfollow", wrapper.DeleteShopsShopIdUnfollow)

}
